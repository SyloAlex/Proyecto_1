package proyecto_1;

public class Proyecto_1 {

    public static void main(String[] args) {
        RestList restaurants = new RestList();
        RestNode rest1 = new RestNode();
        rest1.setRestId("A");
        rest1.setRestName("Pizpa");
        FoodList menu1 = new FoodList();
        menu1.addLast(new FoodNode("Pizza Margarita"));
        menu1.addLast(new FoodNode("Pasticho"));
        menu1.addLast(new FoodNode("Refresco"));
        rest1.setMenu(menu1);
        RestNode rest2 = new RestNode();
        rest2.setRestId("B");
        rest2.setRestName("Sotano Siete");
        FoodList menu2 = new FoodList();
        menu2.addLast(new FoodNode("Prosciutto Funghi"));
        menu2.addLast(new FoodNode("Pizza Napoletana"));
        menu2.addLast(new FoodNode("Calzone"));
        rest2.setMenu(menu2);
        RestNode rest3 = new RestNode();
        rest3.setRestId("C");
        rest3.setRestName("Avila Burger");
        FoodList menu3 = new FoodList();
        menu3.addLast(new FoodNode("Banquito Burger"));
        menu3.addLast(new FoodNode("Papas Fritas"));
        menu3.addLast(new FoodNode("Aros de Cebolla"));
        menu3.addLast(new FoodNode("Nestea"));
        rest3.setMenu(menu3);
        RestNode rest4 = new RestNode();
        rest4.setRestId("D");
        rest4.setRestName("Buffalo Wings");
        FoodList menu4 = new FoodList();
        menu4.addLast(new FoodNode("Papitas Kardashian"));
        menu4.addLast(new FoodNode("Burger Homero"));
        menu4.addLast(new FoodNode("Costillas"));
        menu4.addLast(new FoodNode("Agua"));
        rest4.setMenu(menu4);
        RestNode rest5 = new RestNode();
        rest5.setRestId("E");
        rest5.setRestName("Holy Chicken");
        FoodList menu5 = new FoodList();
        menu5.addLast(new FoodNode("Holy Chicken"));
        menu5.addLast(new FoodNode("Holy Tempeh"));
        menu5.addLast(new FoodNode("Holy Slaw"));
        menu5.addLast(new FoodNode("Holy Chicken Tenders"));
        rest5.setMenu(menu5);
        restaurants.addLast(rest1);
        restaurants.addLast(rest2);
        restaurants.addLast(rest3);
        restaurants.addLast(rest4);
        restaurants.addLast(rest5);
        ClientsList clients = new ClientsList();
        ClientNode client1 = new ClientNode("1", "Pepe", "Gonzalez", 234354);
        ClientNode client2 = new ClientNode("2", "Stephania", "Cominos", 24574354);
        ClientNode client3 = new ClientNode("3", "Andrea", "Stanislao", 27385643);
        ClientNode client4 = new ClientNode("4", "Josefina", "La Sifrina", 6547584);
        ClientNode client5 = new ClientNode("5", "Rosa", "Mosa", 574543);
        ClientNode client6 = new ClientNode("6", "Eduardo", "Petardo", 4326534);
        ClientNode client7 = new ClientNode("7", "Enrique", "Manrique", 434543);
        clients.addLast(client1);
        clients.addLast(client2);
        clients.addLast(client3);
        clients.addLast(client4);
        clients.addLast(client5);
        clients.addLast(client6);
        clients.addLast(client7);
        OrderList orders = new OrderList();
        OrderNode order1 = new OrderNode("A", "3");
        FoodList order1food = new FoodList();
        order1food.addLast(new FoodNode("Pizza Margarita", 2));
        order1food.addLast(new FoodNode("Pasticho", 1));
        order1.setOrder(order1food);
        orders.addLast(order1);
        OrderNode order2 = new OrderNode("E", "6");
        FoodList order2food = new FoodList();
        order2food.addLast(new FoodNode("Holy Tempeh", 5));
        order2food.addLast(new FoodNode("Holy Chicken Tenders", 1));
        order2.setOrder(order2food);
        orders.addLast(order2);
        OrderNode order3 = new OrderNode("C", "1");
        FoodList order3food = new FoodList();
        order3food.addLast(new FoodNode("Banquito Burger", 9));
        order3food.addLast(new FoodNode("Aros de Cebolla", 6));
        order3.setOrder(order3food);
        orders.addLast(order3);
        OrderNode order4 = new OrderNode("B", "4");
        FoodList order4food = new FoodList();
        order4food.addLast(new FoodNode("Prosciutto Funghi", 3));
        order4.setOrder(order4food);
        orders.addLast(order4);
        OrderNode order5 = new OrderNode("D", "7");
        FoodList order5food = new FoodList();
        order5food.addLast(new FoodNode("Burger Homero", 4));
        order5food.addLast(new FoodNode("Costillas", 1));
        order5.setOrder(order5food);
        orders.addLast(order5);
        RouteList routeList = new RouteList();
        RouteNode route1 = new RouteNode("A", "1", 3);
        RouteNode route2 = new RouteNode("A", "2", 2);
        RouteNode route3 = new RouteNode("1", "C", 2);
        RouteNode route4 = new RouteNode("1", "5", 8);
        RouteNode route5 = new RouteNode("2", "E", 2);
        RouteNode route6 = new RouteNode("2", "4", 4);
        RouteNode route7 = new RouteNode("C", "5", 3);
        RouteNode route8 = new RouteNode("4", "3", 2);
        RouteNode route9 = new RouteNode("4", "B", 6);
        RouteNode route10 = new RouteNode("5", "B", 3);
        RouteNode route11 = new RouteNode("5", "E", 7);
        RouteNode route12 = new RouteNode("B", "6", 7);
        RouteNode route13 = new RouteNode("3", "7", 1);
        RouteNode route14 = new RouteNode("7", "D", 4);
        RouteNode route15 = new RouteNode("D", "B", 1);
        RouteNode route16 = new RouteNode("D", "6", 5);
        RouteNode route17 = new RouteNode("6", "5", 5);
        RouteNode route18 = new RouteNode("6", "C", 6);
        RouteNode route19 = new RouteNode("E", "1", 1);
        RouteNode route20 = new RouteNode("E", "A", 1);
        routeList.addFirst(route1);
        routeList.addLast(route2);
        routeList.addLast(route3);
        routeList.addLast(route4);
        routeList.addLast(route5);
        routeList.addLast(route6);
        routeList.addLast(route7);
        routeList.addLast(route8);
        routeList.addLast(route9);
        routeList.addLast(route10);
        routeList.addLast(route11);
        routeList.addLast(route12);
        routeList.addLast(route13);
        routeList.addLast(route14);
        routeList.addLast(route15);
        routeList.addLast(route16);
        routeList.addLast(route17);
        routeList.addLast(route18);
        routeList.addLast(route19);
        routeList.addLast(route20);
        Functions f = new Functions();
        RouteList copyRoutes = f.copyRoutes(routeList);
        f.changeRoutesEntrance(routeList, clients);
        f.changeRoutesExits(routeList, clients);
        DijkstraAlg dijkstra = new DijkstraAlg();
        OrderNode aux = orders.getFirst();
        for (int i = 0; i < orders.getSize(); i++){
            PathNode result = dijkstra.runAlgorithm(aux.getOrigin(), copyRoutes, aux.getDestiny());
            System.out.println("Recorrido de la Orden #" + (i + 1));
            System.out.println(result.getDistance());
            result.printVertexes();
            System.out.println("");
            System.out.println(">>>>>>>>>>>>>>>>>>>>>");
            aux = aux.getNext();
        }
//        PathNode result = dijkstra.runAlgorithm("A", copyRoutes, "6");
//        System.out.println(result.getDistance());
//        result.printVertexes();
//        System.out.println("");
//        routeList.printRoutes();
//        Matrix adjMatrix = new Matrix(restaurants.getSize()+clients.getSize(), 
//                999999999);
//        f.fillMatrix(adjMatrix, routeList);
//        adjMatrix.fillDiagonal();
//        adjMatrix.printMatrix();
//        FloydWarshall fl = new FloydWarshall();
//        String stringResult = fl.mentalHealthKiller(adjMatrix);
//        fl.runFloydWarshall(adjMatrix);
    }
    
}
